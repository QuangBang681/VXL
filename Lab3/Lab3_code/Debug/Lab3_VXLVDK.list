
Lab3_VXLVDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb4  08002bb4  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002bb4  08002bb4  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bb4  08002bb4  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000054  08002c10  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002c10  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bb8  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e6  00000000  00000000  00028c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002a620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c01  00000000  00000000  0002b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6e3  00000000  00000000  000425a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a68  00000000  00000000  0004dc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d36ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  000d373c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b78 	.word	0x08002b78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002b78 	.word	0x08002b78

0800014c <isButton1Pressed>:
int KeyReg3 = NORMAL_STATE;

int TimeOutForKeyPress_1 =  500;
int button1_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000070 	.word	0x20000070

08000170 <subKeyProcess_1>:

void subKeyProcess_1(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcess_1+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000070 	.word	0x20000070

08000188 <getKeyInput_1>:

void getKeyInput_1(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 800018c:	4b23      	ldr	r3, [pc, #140]	; (800021c <getKeyInput_1+0x94>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a23      	ldr	r2, [pc, #140]	; (8000220 <getKeyInput_1+0x98>)
 8000192:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000194:	4b23      	ldr	r3, [pc, #140]	; (8000224 <getKeyInput_1+0x9c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a20      	ldr	r2, [pc, #128]	; (800021c <getKeyInput_1+0x94>)
 800019a:	6013      	str	r3, [r2, #0]
  //Add your button here
  KeyReg0 = HAL_GPIO_ReadPin(button_GPIO_Port,button_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	4821      	ldr	r0, [pc, #132]	; (8000228 <getKeyInput_1+0xa0>)
 80001a2:	f001 fcc7 	bl	8001b34 <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b1e      	ldr	r3, [pc, #120]	; (8000224 <getKeyInput_1+0x9c>)
 80001ac:	601a      	str	r2, [r3, #0]

  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 80001ae:	4b1b      	ldr	r3, [pc, #108]	; (800021c <getKeyInput_1+0x94>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b1c      	ldr	r3, [pc, #112]	; (8000224 <getKeyInput_1+0x9c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d12d      	bne.n	8000216 <getKeyInput_1+0x8e>
 80001ba:	4b18      	ldr	r3, [pc, #96]	; (800021c <getKeyInput_1+0x94>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b18      	ldr	r3, [pc, #96]	; (8000220 <getKeyInput_1+0x98>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d127      	bne.n	8000216 <getKeyInput_1+0x8e>
    if (KeyReg2 != KeyReg3){
 80001c6:	4b16      	ldr	r3, [pc, #88]	; (8000220 <getKeyInput_1+0x98>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b18      	ldr	r3, [pc, #96]	; (800022c <getKeyInput_1+0xa4>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d00e      	beq.n	80001f0 <getKeyInput_1+0x68>
      KeyReg3 = KeyReg2;
 80001d2:	4b13      	ldr	r3, [pc, #76]	; (8000220 <getKeyInput_1+0x98>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a15      	ldr	r2, [pc, #84]	; (800022c <getKeyInput_1+0xa4>)
 80001d8:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 80001da:	4b14      	ldr	r3, [pc, #80]	; (800022c <getKeyInput_1+0xa4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d119      	bne.n	8000216 <getKeyInput_1+0x8e>
        TimeOutForKeyPress_1 = 500;
 80001e2:	4b13      	ldr	r3, [pc, #76]	; (8000230 <getKeyInput_1+0xa8>)
 80001e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001e8:	601a      	str	r2, [r3, #0]
        subKeyProcess_1();
 80001ea:	f7ff ffc1 	bl	8000170 <subKeyProcess_1>
        		subKeyProcess_1();
        	}
        }
    }
  }
}
 80001ee:	e012      	b.n	8000216 <getKeyInput_1+0x8e>
       TimeOutForKeyPress_1 --;
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <getKeyInput_1+0xa8>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	3b01      	subs	r3, #1
 80001f6:	4a0e      	ldr	r2, [pc, #56]	; (8000230 <getKeyInput_1+0xa8>)
 80001f8:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress_1 == 0){
 80001fa:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <getKeyInput_1+0xa8>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d109      	bne.n	8000216 <getKeyInput_1+0x8e>
        	TimeOutForKeyPress_1 = 500;
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <getKeyInput_1+0xa8>)
 8000204:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000208:	601a      	str	r2, [r3, #0]
        	if (KeyReg3 == PRESSED_STATE)
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <getKeyInput_1+0xa4>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d101      	bne.n	8000216 <getKeyInput_1+0x8e>
        		subKeyProcess_1();
 8000212:	f7ff ffad 	bl	8000170 <subKeyProcess_1>
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000004 	.word	0x20000004
 8000220:	20000008 	.word	0x20000008
 8000224:	20000000 	.word	0x20000000
 8000228:	40011000 	.word	0x40011000
 800022c:	2000000c 	.word	0x2000000c
 8000230:	20000010 	.word	0x20000010

08000234 <isButton2Pressed>:
int KeyReg3_2 = NORMAL_STATE;

int TimeOutForKeyPress_2 =  500;
int button2_flag = 0;

int isButton2Pressed(){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <isButton2Pressed+0x20>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d104      	bne.n	800024a <isButton2Pressed+0x16>
		button2_flag = 0;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <isButton2Pressed+0x20>)
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
		return 1;
 8000246:	2301      	movs	r3, #1
 8000248:	e000      	b.n	800024c <isButton2Pressed+0x18>
	}
	return 0;
 800024a:	2300      	movs	r3, #0
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	20000074 	.word	0x20000074

08000258 <subKeyProcess_2>:

void subKeyProcess_2(){
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	button2_flag = 1;
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <subKeyProcess_2+0x14>)
 800025e:	2201      	movs	r2, #1
 8000260:	601a      	str	r2, [r3, #0]
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000074 	.word	0x20000074

08000270 <getKeyInput_2>:

void getKeyInput_2(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  KeyReg2_2 = KeyReg1_2;
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <getKeyInput_2+0x94>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a23      	ldr	r2, [pc, #140]	; (8000308 <getKeyInput_2+0x98>)
 800027a:	6013      	str	r3, [r2, #0]
  KeyReg1_2 = KeyReg0_2;
 800027c:	4b23      	ldr	r3, [pc, #140]	; (800030c <getKeyInput_2+0x9c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a20      	ldr	r2, [pc, #128]	; (8000304 <getKeyInput_2+0x94>)
 8000282:	6013      	str	r3, [r2, #0]
  //Add your button here
  KeyReg0_2 = HAL_GPIO_ReadPin(button2_GPIO_Port,button2_Pin);
 8000284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000288:	4821      	ldr	r0, [pc, #132]	; (8000310 <getKeyInput_2+0xa0>)
 800028a:	f001 fc53 	bl	8001b34 <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b1e      	ldr	r3, [pc, #120]	; (800030c <getKeyInput_2+0x9c>)
 8000294:	601a      	str	r2, [r3, #0]

  if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)){
 8000296:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <getKeyInput_2+0x94>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	4b1c      	ldr	r3, [pc, #112]	; (800030c <getKeyInput_2+0x9c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d12d      	bne.n	80002fe <getKeyInput_2+0x8e>
 80002a2:	4b18      	ldr	r3, [pc, #96]	; (8000304 <getKeyInput_2+0x94>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	4b18      	ldr	r3, [pc, #96]	; (8000308 <getKeyInput_2+0x98>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d127      	bne.n	80002fe <getKeyInput_2+0x8e>
    if (KeyReg2_2 != KeyReg3_2){
 80002ae:	4b16      	ldr	r3, [pc, #88]	; (8000308 <getKeyInput_2+0x98>)
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	4b18      	ldr	r3, [pc, #96]	; (8000314 <getKeyInput_2+0xa4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d00e      	beq.n	80002d8 <getKeyInput_2+0x68>
      KeyReg3_2 = KeyReg2_2;
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <getKeyInput_2+0x98>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a15      	ldr	r2, [pc, #84]	; (8000314 <getKeyInput_2+0xa4>)
 80002c0:	6013      	str	r3, [r2, #0]

      if (KeyReg3_2 == PRESSED_STATE){
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <getKeyInput_2+0xa4>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d119      	bne.n	80002fe <getKeyInput_2+0x8e>
        TimeOutForKeyPress_2 = 500;
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <getKeyInput_2+0xa8>)
 80002cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002d0:	601a      	str	r2, [r3, #0]
        subKeyProcess_2();
 80002d2:	f7ff ffc1 	bl	8000258 <subKeyProcess_2>
        		subKeyProcess_2();
        	}
        }
    }
  }
}
 80002d6:	e012      	b.n	80002fe <getKeyInput_2+0x8e>
       TimeOutForKeyPress_2--;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <getKeyInput_2+0xa8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	3b01      	subs	r3, #1
 80002de:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <getKeyInput_2+0xa8>)
 80002e0:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress_2 == 0){
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <getKeyInput_2+0xa8>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d109      	bne.n	80002fe <getKeyInput_2+0x8e>
        	TimeOutForKeyPress_2 = 500;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <getKeyInput_2+0xa8>)
 80002ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002f0:	601a      	str	r2, [r3, #0]
        	if (KeyReg3_2 == PRESSED_STATE)
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <getKeyInput_2+0xa4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d101      	bne.n	80002fe <getKeyInput_2+0x8e>
        		subKeyProcess_2();
 80002fa:	f7ff ffad 	bl	8000258 <subKeyProcess_2>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000018 	.word	0x20000018
 8000308:	2000001c 	.word	0x2000001c
 800030c:	20000014 	.word	0x20000014
 8000310:	40011000 	.word	0x40011000
 8000314:	20000020 	.word	0x20000020
 8000318:	20000024 	.word	0x20000024

0800031c <isButton3Pressed>:
int KeyReg3_3 = NORMAL_STATE;

int TimeOutForKeyPress_3 =  500;
int button3_flag = 0;

int isButton3Pressed(){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <isButton3Pressed+0x20>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d104      	bne.n	8000332 <isButton3Pressed+0x16>
		button3_flag = 0;
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <isButton3Pressed+0x20>)
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
		return 1;
 800032e:	2301      	movs	r3, #1
 8000330:	e000      	b.n	8000334 <isButton3Pressed+0x18>
	}
	return 0;
 8000332:	2300      	movs	r3, #0
}
 8000334:	4618      	mov	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	20000078 	.word	0x20000078

08000340 <subKeyProcess_3>:

void subKeyProcess_3(){
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <subKeyProcess_3+0x14>)
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	20000078 	.word	0x20000078

08000358 <getKeyInput_3>:

void getKeyInput_3(){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  KeyReg2_3 = KeyReg1_3;
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <getKeyInput_3+0x94>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a23      	ldr	r2, [pc, #140]	; (80003f0 <getKeyInput_3+0x98>)
 8000362:	6013      	str	r3, [r2, #0]
  KeyReg1_3 = KeyReg0_3;
 8000364:	4b23      	ldr	r3, [pc, #140]	; (80003f4 <getKeyInput_3+0x9c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <getKeyInput_3+0x94>)
 800036a:	6013      	str	r3, [r2, #0]
  //Add your button here
  KeyReg0_3 = HAL_GPIO_ReadPin(button3_GPIO_Port,button3_Pin);
 800036c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000370:	4821      	ldr	r0, [pc, #132]	; (80003f8 <getKeyInput_3+0xa0>)
 8000372:	f001 fbdf 	bl	8001b34 <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <getKeyInput_3+0x9c>)
 800037c:	601a      	str	r2, [r3, #0]

  if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)){
 800037e:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <getKeyInput_3+0x94>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <getKeyInput_3+0x9c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d12d      	bne.n	80003e6 <getKeyInput_3+0x8e>
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <getKeyInput_3+0x94>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <getKeyInput_3+0x98>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	429a      	cmp	r2, r3
 8000394:	d127      	bne.n	80003e6 <getKeyInput_3+0x8e>
    if (KeyReg2_3 != KeyReg3_3){
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <getKeyInput_3+0x98>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <getKeyInput_3+0xa4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d00e      	beq.n	80003c0 <getKeyInput_3+0x68>
      KeyReg3_3 = KeyReg2_3;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <getKeyInput_3+0x98>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a15      	ldr	r2, [pc, #84]	; (80003fc <getKeyInput_3+0xa4>)
 80003a8:	6013      	str	r3, [r2, #0]

      if (KeyReg3_3 == PRESSED_STATE){
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <getKeyInput_3+0xa4>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d119      	bne.n	80003e6 <getKeyInput_3+0x8e>
        TimeOutForKeyPress_3 = 500;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <getKeyInput_3+0xa8>)
 80003b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003b8:	601a      	str	r2, [r3, #0]
        subKeyProcess_3();
 80003ba:	f7ff ffc1 	bl	8000340 <subKeyProcess_3>
        		subKeyProcess_3();
        	}
        }
    }
  }
}
 80003be:	e012      	b.n	80003e6 <getKeyInput_3+0x8e>
       TimeOutForKeyPress_3--;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <getKeyInput_3+0xa8>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	3b01      	subs	r3, #1
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <getKeyInput_3+0xa8>)
 80003c8:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress_3 == 0){
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <getKeyInput_3+0xa8>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d109      	bne.n	80003e6 <getKeyInput_3+0x8e>
        	TimeOutForKeyPress_3 = 500;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <getKeyInput_3+0xa8>)
 80003d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003d8:	601a      	str	r2, [r3, #0]
        	if (KeyReg3_3 == PRESSED_STATE)
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <getKeyInput_3+0xa4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d101      	bne.n	80003e6 <getKeyInput_3+0x8e>
        		subKeyProcess_3();
 80003e2:	f7ff ffad 	bl	8000340 <subKeyProcess_3>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000002c 	.word	0x2000002c
 80003f0:	20000030 	.word	0x20000030
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40011000 	.word	0x40011000
 80003fc:	20000034 	.word	0x20000034
 8000400:	20000038 	.word	0x20000038

08000404 <fsm_run>:
//
//
//}

void fsm_run()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	switch (status)
 8000408:	4bc4      	ldr	r3, [pc, #784]	; (800071c <fsm_run+0x318>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	2b04      	cmp	r3, #4
 8000410:	f200 8178 	bhi.w	8000704 <fsm_run+0x300>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <fsm_run+0x18>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	08000431 	.word	0x08000431
 8000420:	080004a9 	.word	0x080004a9
 8000424:	08000541 	.word	0x08000541
 8000428:	080005d9 	.word	0x080005d9
 800042c:	0800066f 	.word	0x0800066f
	{
		case INIT:
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_SET);
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	48ba      	ldr	r0, [pc, #744]	; (8000720 <fsm_run+0x31c>)
 8000438:	f001 fb93 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000442:	48b7      	ldr	r0, [pc, #732]	; (8000720 <fsm_run+0x31c>)
 8000444:	f001 fb8d 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044e:	48b4      	ldr	r0, [pc, #720]	; (8000720 <fsm_run+0x31c>)
 8000450:	f001 fb87 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800045a:	48b1      	ldr	r0, [pc, #708]	; (8000720 <fsm_run+0x31c>)
 800045c:	f001 fb81 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000466:	48ae      	ldr	r0, [pc, #696]	; (8000720 <fsm_run+0x31c>)
 8000468:	f001 fb7b 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000472:	48ab      	ldr	r0, [pc, #684]	; (8000720 <fsm_run+0x31c>)
 8000474:	f001 fb75 	bl	8001b62 <HAL_GPIO_WritePin>
			status = AUTO_RED_GREEN;
 8000478:	4ba8      	ldr	r3, [pc, #672]	; (800071c <fsm_run+0x318>)
 800047a:	2202      	movs	r2, #2
 800047c:	601a      	str	r2, [r3, #0]
			setTimer1(green_time*100);
 800047e:	4ba9      	ldr	r3, [pc, #676]	; (8000724 <fsm_run+0x320>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2264      	movs	r2, #100	; 0x64
 8000484:	fb02 f303 	mul.w	r3, r2, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f000 ffd7 	bl	800143c <setTimer1>
			updateBuffer(1, red_time);
 800048e:	4ba6      	ldr	r3, [pc, #664]	; (8000728 <fsm_run+0x324>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4619      	mov	r1, r3
 8000494:	2001      	movs	r0, #1
 8000496:	f000 fbab 	bl	8000bf0 <updateBuffer>
			updateBuffer(3, green_time);
 800049a:	4ba2      	ldr	r3, [pc, #648]	; (8000724 <fsm_run+0x320>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4619      	mov	r1, r3
 80004a0:	2003      	movs	r0, #3
 80004a2:	f000 fba5 	bl	8000bf0 <updateBuffer>
			break;
 80004a6:	e136      	b.n	8000716 <fsm_run+0x312>
		case AUTO_RED_GREEN:
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ae:	489c      	ldr	r0, [pc, #624]	; (8000720 <fsm_run+0x31c>)
 80004b0:	f001 fb57 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ba:	4899      	ldr	r0, [pc, #612]	; (8000720 <fsm_run+0x31c>)
 80004bc:	f001 fb51 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_SET);
 80004c0:	2201      	movs	r2, #1
 80004c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c6:	4896      	ldr	r0, [pc, #600]	; (8000720 <fsm_run+0x31c>)
 80004c8:	f001 fb4b 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004d2:	4893      	ldr	r0, [pc, #588]	; (8000720 <fsm_run+0x31c>)
 80004d4:	f001 fb45 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004de:	4890      	ldr	r0, [pc, #576]	; (8000720 <fsm_run+0x31c>)
 80004e0:	f001 fb3f 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ea:	488d      	ldr	r0, [pc, #564]	; (8000720 <fsm_run+0x31c>)
 80004ec:	f001 fb39 	bl	8001b62 <HAL_GPIO_WritePin>
			if (timer1_flag == 1)
 80004f0:	4b8e      	ldr	r3, [pc, #568]	; (800072c <fsm_run+0x328>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d116      	bne.n	8000526 <fsm_run+0x122>
			{
				status = AUTO_RED_YELLOW;
 80004f8:	4b88      	ldr	r3, [pc, #544]	; (800071c <fsm_run+0x318>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	601a      	str	r2, [r3, #0]
				setTimer1(yellow_time*100);
 80004fe:	4b8c      	ldr	r3, [pc, #560]	; (8000730 <fsm_run+0x32c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2264      	movs	r2, #100	; 0x64
 8000504:	fb02 f303 	mul.w	r3, r2, r3
 8000508:	4618      	mov	r0, r3
 800050a:	f000 ff97 	bl	800143c <setTimer1>
				updateBuffer(1, yellow_time);
 800050e:	4b88      	ldr	r3, [pc, #544]	; (8000730 <fsm_run+0x32c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	f000 fb6b 	bl	8000bf0 <updateBuffer>
				updateBuffer(3, yellow_time);
 800051a:	4b85      	ldr	r3, [pc, #532]	; (8000730 <fsm_run+0x32c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	2003      	movs	r0, #3
 8000522:	f000 fb65 	bl	8000bf0 <updateBuffer>
			}
			if (isButton1Pressed() == 1)
 8000526:	f7ff fe11 	bl	800014c <isButton1Pressed>
 800052a:	4603      	mov	r3, r0
 800052c:	2b01      	cmp	r3, #1
 800052e:	f040 80eb 	bne.w	8000708 <fsm_run+0x304>
			{
				status = MAN_RED;
 8000532:	4b7a      	ldr	r3, [pc, #488]	; (800071c <fsm_run+0x318>)
 8000534:	220b      	movs	r2, #11
 8000536:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 8000538:	2064      	movs	r0, #100	; 0x64
 800053a:	f000 ff7f 	bl	800143c <setTimer1>
			}
			break;
 800053e:	e0e3      	b.n	8000708 <fsm_run+0x304>
		case AUTO_RED_YELLOW:
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000546:	4876      	ldr	r0, [pc, #472]	; (8000720 <fsm_run+0x31c>)
 8000548:	f001 fb0b 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000552:	4873      	ldr	r0, [pc, #460]	; (8000720 <fsm_run+0x31c>)
 8000554:	f001 fb05 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055e:	4870      	ldr	r0, [pc, #448]	; (8000720 <fsm_run+0x31c>)
 8000560:	f001 faff 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800056a:	486d      	ldr	r0, [pc, #436]	; (8000720 <fsm_run+0x31c>)
 800056c:	f001 faf9 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	486a      	ldr	r0, [pc, #424]	; (8000720 <fsm_run+0x31c>)
 8000578:	f001 faf3 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4867      	ldr	r0, [pc, #412]	; (8000720 <fsm_run+0x31c>)
 8000584:	f001 faed 	bl	8001b62 <HAL_GPIO_WritePin>
			if (timer1_flag == 1)
 8000588:	4b68      	ldr	r3, [pc, #416]	; (800072c <fsm_run+0x328>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d116      	bne.n	80005be <fsm_run+0x1ba>
			{
				status = AUTO_GREEN_RED;
 8000590:	4b62      	ldr	r3, [pc, #392]	; (800071c <fsm_run+0x318>)
 8000592:	2204      	movs	r2, #4
 8000594:	601a      	str	r2, [r3, #0]
				setTimer1(green_time*100);
 8000596:	4b63      	ldr	r3, [pc, #396]	; (8000724 <fsm_run+0x320>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2264      	movs	r2, #100	; 0x64
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 ff4b 	bl	800143c <setTimer1>
				updateBuffer(1, green_time);
 80005a6:	4b5f      	ldr	r3, [pc, #380]	; (8000724 <fsm_run+0x320>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	2001      	movs	r0, #1
 80005ae:	f000 fb1f 	bl	8000bf0 <updateBuffer>
				updateBuffer(3, red_time);
 80005b2:	4b5d      	ldr	r3, [pc, #372]	; (8000728 <fsm_run+0x324>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4619      	mov	r1, r3
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fb19 	bl	8000bf0 <updateBuffer>
			}
			if (isButton1Pressed() == 1)
 80005be:	f7ff fdc5 	bl	800014c <isButton1Pressed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	f040 80a1 	bne.w	800070c <fsm_run+0x308>
			{
				status = MAN_RED;
 80005ca:	4b54      	ldr	r3, [pc, #336]	; (800071c <fsm_run+0x318>)
 80005cc:	220b      	movs	r2, #11
 80005ce:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f000 ff33 	bl	800143c <setTimer1>
			}
			break;
 80005d6:	e099      	b.n	800070c <fsm_run+0x308>
		case AUTO_GREEN_RED:
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005de:	4850      	ldr	r0, [pc, #320]	; (8000720 <fsm_run+0x31c>)
 80005e0:	f001 fabf 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	484d      	ldr	r0, [pc, #308]	; (8000720 <fsm_run+0x31c>)
 80005ec:	f001 fab9 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f6:	484a      	ldr	r0, [pc, #296]	; (8000720 <fsm_run+0x31c>)
 80005f8:	f001 fab3 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000602:	4847      	ldr	r0, [pc, #284]	; (8000720 <fsm_run+0x31c>)
 8000604:	f001 faad 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4844      	ldr	r0, [pc, #272]	; (8000720 <fsm_run+0x31c>)
 8000610:	f001 faa7 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4841      	ldr	r0, [pc, #260]	; (8000720 <fsm_run+0x31c>)
 800061c:	f001 faa1 	bl	8001b62 <HAL_GPIO_WritePin>
			if (timer1_flag == 1)
 8000620:	4b42      	ldr	r3, [pc, #264]	; (800072c <fsm_run+0x328>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d116      	bne.n	8000656 <fsm_run+0x252>
			{
				status = AUTO_YELLOW_RED;
 8000628:	4b3c      	ldr	r3, [pc, #240]	; (800071c <fsm_run+0x318>)
 800062a:	2205      	movs	r2, #5
 800062c:	601a      	str	r2, [r3, #0]
				setTimer1(yellow_time*100);
 800062e:	4b40      	ldr	r3, [pc, #256]	; (8000730 <fsm_run+0x32c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2264      	movs	r2, #100	; 0x64
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	4618      	mov	r0, r3
 800063a:	f000 feff 	bl	800143c <setTimer1>
				updateBuffer(1, yellow_time);
 800063e:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <fsm_run+0x32c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4619      	mov	r1, r3
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fad3 	bl	8000bf0 <updateBuffer>
				updateBuffer(3, yellow_time);
 800064a:	4b39      	ldr	r3, [pc, #228]	; (8000730 <fsm_run+0x32c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4619      	mov	r1, r3
 8000650:	2003      	movs	r0, #3
 8000652:	f000 facd 	bl	8000bf0 <updateBuffer>
			}
			if (isButton1Pressed() == 1)
 8000656:	f7ff fd79 	bl	800014c <isButton1Pressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d157      	bne.n	8000710 <fsm_run+0x30c>
			{
				status = MAN_RED;
 8000660:	4b2e      	ldr	r3, [pc, #184]	; (800071c <fsm_run+0x318>)
 8000662:	220b      	movs	r2, #11
 8000664:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 8000666:	2064      	movs	r0, #100	; 0x64
 8000668:	f000 fee8 	bl	800143c <setTimer1>
			}
			break;
 800066c:	e050      	b.n	8000710 <fsm_run+0x30c>
		case AUTO_YELLOW_RED:
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000674:	482a      	ldr	r0, [pc, #168]	; (8000720 <fsm_run+0x31c>)
 8000676:	f001 fa74 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	4827      	ldr	r0, [pc, #156]	; (8000720 <fsm_run+0x31c>)
 8000682:	f001 fa6e 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068c:	4824      	ldr	r0, [pc, #144]	; (8000720 <fsm_run+0x31c>)
 800068e:	f001 fa68 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	4821      	ldr	r0, [pc, #132]	; (8000720 <fsm_run+0x31c>)
 800069a:	f001 fa62 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a4:	481e      	ldr	r0, [pc, #120]	; (8000720 <fsm_run+0x31c>)
 80006a6:	f001 fa5c 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <fsm_run+0x31c>)
 80006b2:	f001 fa56 	bl	8001b62 <HAL_GPIO_WritePin>
			if (timer1_flag == 1)
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <fsm_run+0x328>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d116      	bne.n	80006ec <fsm_run+0x2e8>
			{
				status = AUTO_RED_GREEN;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <fsm_run+0x318>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	601a      	str	r2, [r3, #0]
				setTimer1(green_time*100);
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <fsm_run+0x320>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2264      	movs	r2, #100	; 0x64
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 feb4 	bl	800143c <setTimer1>
				updateBuffer(1, red_time);
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <fsm_run+0x324>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fa88 	bl	8000bf0 <updateBuffer>
				updateBuffer(3, green_time);
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <fsm_run+0x320>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	2003      	movs	r0, #3
 80006e8:	f000 fa82 	bl	8000bf0 <updateBuffer>
			}
			if (isButton1Pressed() == 1)
 80006ec:	f7ff fd2e 	bl	800014c <isButton1Pressed>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d10e      	bne.n	8000714 <fsm_run+0x310>
			{
				status = MAN_RED;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <fsm_run+0x318>)
 80006f8:	220b      	movs	r2, #11
 80006fa:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 80006fc:	2064      	movs	r0, #100	; 0x64
 80006fe:	f000 fe9d 	bl	800143c <setTimer1>
			}
			break;
 8000702:	e007      	b.n	8000714 <fsm_run+0x310>
		default:
			break;
 8000704:	bf00      	nop
 8000706:	e006      	b.n	8000716 <fsm_run+0x312>
			break;
 8000708:	bf00      	nop
 800070a:	e004      	b.n	8000716 <fsm_run+0x312>
			break;
 800070c:	bf00      	nop
 800070e:	e002      	b.n	8000716 <fsm_run+0x312>
			break;
 8000710:	bf00      	nop
 8000712:	e000      	b.n	8000716 <fsm_run+0x312>
			break;
 8000714:	bf00      	nop
	}


}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000007c 	.word	0x2000007c
 8000720:	40010800 	.word	0x40010800
 8000724:	20000044 	.word	0x20000044
 8000728:	2000003c 	.word	0x2000003c
 800072c:	200000e8 	.word	0x200000e8
 8000730:	20000040 	.word	0x20000040

08000734 <display7SEG>:




void display7SEG(int num)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	switch(num)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b09      	cmp	r3, #9
 8000740:	f200 8180 	bhi.w	8000a44 <display7SEG+0x310>
 8000744:	a201      	add	r2, pc, #4	; (adr r2, 800074c <display7SEG+0x18>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	08000775 	.word	0x08000775
 8000750:	080007bd 	.word	0x080007bd
 8000754:	08000805 	.word	0x08000805
 8000758:	0800084d 	.word	0x0800084d
 800075c:	08000895 	.word	0x08000895
 8000760:	080008dd 	.word	0x080008dd
 8000764:	08000925 	.word	0x08000925
 8000768:	0800096d 	.word	0x0800096d
 800076c:	080009b5 	.word	0x080009b5
 8000770:	080009fd 	.word	0x080009fd
	{
		case 0:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, RESET);  //0
 8000774:	2200      	movs	r2, #0
 8000776:	2102      	movs	r1, #2
 8000778:	48c6      	ldr	r0, [pc, #792]	; (8000a94 <display7SEG+0x360>)
 800077a:	f001 f9f2 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	48c4      	ldr	r0, [pc, #784]	; (8000a94 <display7SEG+0x360>)
 8000784:	f001 f9ed 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	48c1      	ldr	r0, [pc, #772]	; (8000a94 <display7SEG+0x360>)
 800078e:	f001 f9e8 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2110      	movs	r1, #16
 8000796:	48bf      	ldr	r0, [pc, #764]	; (8000a94 <display7SEG+0x360>)
 8000798:	f001 f9e3 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	48bc      	ldr	r0, [pc, #752]	; (8000a94 <display7SEG+0x360>)
 80007a2:	f001 f9de 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2140      	movs	r1, #64	; 0x40
 80007aa:	48ba      	ldr	r0, [pc, #744]	; (8000a94 <display7SEG+0x360>)
 80007ac:	f001 f9d9 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	48b7      	ldr	r0, [pc, #732]	; (8000a94 <display7SEG+0x360>)
 80007b6:	f001 f9d4 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 80007ba:	e167      	b.n	8000a8c <display7SEG+0x358>
		}

		case 1:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, SET);	//1
 80007bc:	2201      	movs	r2, #1
 80007be:	2102      	movs	r1, #2
 80007c0:	48b4      	ldr	r0, [pc, #720]	; (8000a94 <display7SEG+0x360>)
 80007c2:	f001 f9ce 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2104      	movs	r1, #4
 80007ca:	48b2      	ldr	r0, [pc, #712]	; (8000a94 <display7SEG+0x360>)
 80007cc:	f001 f9c9 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2108      	movs	r1, #8
 80007d4:	48af      	ldr	r0, [pc, #700]	; (8000a94 <display7SEG+0x360>)
 80007d6:	f001 f9c4 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2110      	movs	r1, #16
 80007de:	48ad      	ldr	r0, [pc, #692]	; (8000a94 <display7SEG+0x360>)
 80007e0:	f001 f9bf 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2120      	movs	r1, #32
 80007e8:	48aa      	ldr	r0, [pc, #680]	; (8000a94 <display7SEG+0x360>)
 80007ea:	f001 f9ba 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	48a8      	ldr	r0, [pc, #672]	; (8000a94 <display7SEG+0x360>)
 80007f4:	f001 f9b5 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	48a5      	ldr	r0, [pc, #660]	; (8000a94 <display7SEG+0x360>)
 80007fe:	f001 f9b0 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 8000802:	e143      	b.n	8000a8c <display7SEG+0x358>
		}
		case 2:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, RESET);	//2
 8000804:	2200      	movs	r2, #0
 8000806:	2102      	movs	r1, #2
 8000808:	48a2      	ldr	r0, [pc, #648]	; (8000a94 <display7SEG+0x360>)
 800080a:	f001 f9aa 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2104      	movs	r1, #4
 8000812:	48a0      	ldr	r0, [pc, #640]	; (8000a94 <display7SEG+0x360>)
 8000814:	f001 f9a5 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2108      	movs	r1, #8
 800081c:	489d      	ldr	r0, [pc, #628]	; (8000a94 <display7SEG+0x360>)
 800081e:	f001 f9a0 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2110      	movs	r1, #16
 8000826:	489b      	ldr	r0, [pc, #620]	; (8000a94 <display7SEG+0x360>)
 8000828:	f001 f99b 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2120      	movs	r1, #32
 8000830:	4898      	ldr	r0, [pc, #608]	; (8000a94 <display7SEG+0x360>)
 8000832:	f001 f996 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	4896      	ldr	r0, [pc, #600]	; (8000a94 <display7SEG+0x360>)
 800083c:	f001 f991 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	4893      	ldr	r0, [pc, #588]	; (8000a94 <display7SEG+0x360>)
 8000846:	f001 f98c 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 800084a:	e11f      	b.n	8000a8c <display7SEG+0x358>
		}
		case 3:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, RESET);	//3
 800084c:	2200      	movs	r2, #0
 800084e:	2102      	movs	r1, #2
 8000850:	4890      	ldr	r0, [pc, #576]	; (8000a94 <display7SEG+0x360>)
 8000852:	f001 f986 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2104      	movs	r1, #4
 800085a:	488e      	ldr	r0, [pc, #568]	; (8000a94 <display7SEG+0x360>)
 800085c:	f001 f981 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2108      	movs	r1, #8
 8000864:	488b      	ldr	r0, [pc, #556]	; (8000a94 <display7SEG+0x360>)
 8000866:	f001 f97c 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2110      	movs	r1, #16
 800086e:	4889      	ldr	r0, [pc, #548]	; (8000a94 <display7SEG+0x360>)
 8000870:	f001 f977 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2120      	movs	r1, #32
 8000878:	4886      	ldr	r0, [pc, #536]	; (8000a94 <display7SEG+0x360>)
 800087a:	f001 f972 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	4884      	ldr	r0, [pc, #528]	; (8000a94 <display7SEG+0x360>)
 8000884:	f001 f96d 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	4881      	ldr	r0, [pc, #516]	; (8000a94 <display7SEG+0x360>)
 800088e:	f001 f968 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 8000892:	e0fb      	b.n	8000a8c <display7SEG+0x358>
		}
		case 4:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, SET);	//4
 8000894:	2201      	movs	r2, #1
 8000896:	2102      	movs	r1, #2
 8000898:	487e      	ldr	r0, [pc, #504]	; (8000a94 <display7SEG+0x360>)
 800089a:	f001 f962 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2104      	movs	r1, #4
 80008a2:	487c      	ldr	r0, [pc, #496]	; (8000a94 <display7SEG+0x360>)
 80008a4:	f001 f95d 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2108      	movs	r1, #8
 80008ac:	4879      	ldr	r0, [pc, #484]	; (8000a94 <display7SEG+0x360>)
 80008ae:	f001 f958 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2110      	movs	r1, #16
 80008b6:	4877      	ldr	r0, [pc, #476]	; (8000a94 <display7SEG+0x360>)
 80008b8:	f001 f953 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2120      	movs	r1, #32
 80008c0:	4874      	ldr	r0, [pc, #464]	; (8000a94 <display7SEG+0x360>)
 80008c2:	f001 f94e 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	4872      	ldr	r0, [pc, #456]	; (8000a94 <display7SEG+0x360>)
 80008cc:	f001 f949 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	486f      	ldr	r0, [pc, #444]	; (8000a94 <display7SEG+0x360>)
 80008d6:	f001 f944 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 80008da:	e0d7      	b.n	8000a8c <display7SEG+0x358>
		}
		case 5:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, RESET);	//5
 80008dc:	2200      	movs	r2, #0
 80008de:	2102      	movs	r1, #2
 80008e0:	486c      	ldr	r0, [pc, #432]	; (8000a94 <display7SEG+0x360>)
 80008e2:	f001 f93e 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2104      	movs	r1, #4
 80008ea:	486a      	ldr	r0, [pc, #424]	; (8000a94 <display7SEG+0x360>)
 80008ec:	f001 f939 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2108      	movs	r1, #8
 80008f4:	4867      	ldr	r0, [pc, #412]	; (8000a94 <display7SEG+0x360>)
 80008f6:	f001 f934 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2110      	movs	r1, #16
 80008fe:	4865      	ldr	r0, [pc, #404]	; (8000a94 <display7SEG+0x360>)
 8000900:	f001 f92f 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2120      	movs	r1, #32
 8000908:	4862      	ldr	r0, [pc, #392]	; (8000a94 <display7SEG+0x360>)
 800090a:	f001 f92a 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	4860      	ldr	r0, [pc, #384]	; (8000a94 <display7SEG+0x360>)
 8000914:	f001 f925 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	485d      	ldr	r0, [pc, #372]	; (8000a94 <display7SEG+0x360>)
 800091e:	f001 f920 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 8000922:	e0b3      	b.n	8000a8c <display7SEG+0x358>
		}
		case 6:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, RESET);	//6
 8000924:	2200      	movs	r2, #0
 8000926:	2102      	movs	r1, #2
 8000928:	485a      	ldr	r0, [pc, #360]	; (8000a94 <display7SEG+0x360>)
 800092a:	f001 f91a 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2104      	movs	r1, #4
 8000932:	4858      	ldr	r0, [pc, #352]	; (8000a94 <display7SEG+0x360>)
 8000934:	f001 f915 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	4855      	ldr	r0, [pc, #340]	; (8000a94 <display7SEG+0x360>)
 800093e:	f001 f910 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2110      	movs	r1, #16
 8000946:	4853      	ldr	r0, [pc, #332]	; (8000a94 <display7SEG+0x360>)
 8000948:	f001 f90b 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2120      	movs	r1, #32
 8000950:	4850      	ldr	r0, [pc, #320]	; (8000a94 <display7SEG+0x360>)
 8000952:	f001 f906 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	484e      	ldr	r0, [pc, #312]	; (8000a94 <display7SEG+0x360>)
 800095c:	f001 f901 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	484b      	ldr	r0, [pc, #300]	; (8000a94 <display7SEG+0x360>)
 8000966:	f001 f8fc 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 800096a:	e08f      	b.n	8000a8c <display7SEG+0x358>
		}
		case 7:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, RESET);	//7
 800096c:	2200      	movs	r2, #0
 800096e:	2102      	movs	r1, #2
 8000970:	4848      	ldr	r0, [pc, #288]	; (8000a94 <display7SEG+0x360>)
 8000972:	f001 f8f6 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2104      	movs	r1, #4
 800097a:	4846      	ldr	r0, [pc, #280]	; (8000a94 <display7SEG+0x360>)
 800097c:	f001 f8f1 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2108      	movs	r1, #8
 8000984:	4843      	ldr	r0, [pc, #268]	; (8000a94 <display7SEG+0x360>)
 8000986:	f001 f8ec 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2110      	movs	r1, #16
 800098e:	4841      	ldr	r0, [pc, #260]	; (8000a94 <display7SEG+0x360>)
 8000990:	f001 f8e7 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2120      	movs	r1, #32
 8000998:	483e      	ldr	r0, [pc, #248]	; (8000a94 <display7SEG+0x360>)
 800099a:	f001 f8e2 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	483c      	ldr	r0, [pc, #240]	; (8000a94 <display7SEG+0x360>)
 80009a4:	f001 f8dd 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	4839      	ldr	r0, [pc, #228]	; (8000a94 <display7SEG+0x360>)
 80009ae:	f001 f8d8 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 80009b2:	e06b      	b.n	8000a8c <display7SEG+0x358>
		}
		case 8:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, RESET);	//8
 80009b4:	2200      	movs	r2, #0
 80009b6:	2102      	movs	r1, #2
 80009b8:	4836      	ldr	r0, [pc, #216]	; (8000a94 <display7SEG+0x360>)
 80009ba:	f001 f8d2 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2104      	movs	r1, #4
 80009c2:	4834      	ldr	r0, [pc, #208]	; (8000a94 <display7SEG+0x360>)
 80009c4:	f001 f8cd 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2108      	movs	r1, #8
 80009cc:	4831      	ldr	r0, [pc, #196]	; (8000a94 <display7SEG+0x360>)
 80009ce:	f001 f8c8 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2110      	movs	r1, #16
 80009d6:	482f      	ldr	r0, [pc, #188]	; (8000a94 <display7SEG+0x360>)
 80009d8:	f001 f8c3 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2120      	movs	r1, #32
 80009e0:	482c      	ldr	r0, [pc, #176]	; (8000a94 <display7SEG+0x360>)
 80009e2:	f001 f8be 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	482a      	ldr	r0, [pc, #168]	; (8000a94 <display7SEG+0x360>)
 80009ec:	f001 f8b9 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	4827      	ldr	r0, [pc, #156]	; (8000a94 <display7SEG+0x360>)
 80009f6:	f001 f8b4 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 80009fa:	e047      	b.n	8000a8c <display7SEG+0x358>
		}
		case 9:
		{
			  HAL_GPIO_WritePin(GPIOA, a_Pin, RESET);	//9
 80009fc:	2200      	movs	r2, #0
 80009fe:	2102      	movs	r1, #2
 8000a00:	4824      	ldr	r0, [pc, #144]	; (8000a94 <display7SEG+0x360>)
 8000a02:	f001 f8ae 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2104      	movs	r1, #4
 8000a0a:	4822      	ldr	r0, [pc, #136]	; (8000a94 <display7SEG+0x360>)
 8000a0c:	f001 f8a9 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2108      	movs	r1, #8
 8000a14:	481f      	ldr	r0, [pc, #124]	; (8000a94 <display7SEG+0x360>)
 8000a16:	f001 f8a4 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	481d      	ldr	r0, [pc, #116]	; (8000a94 <display7SEG+0x360>)
 8000a20:	f001 f89f 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2120      	movs	r1, #32
 8000a28:	481a      	ldr	r0, [pc, #104]	; (8000a94 <display7SEG+0x360>)
 8000a2a:	f001 f89a 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <display7SEG+0x360>)
 8000a34:	f001 f895 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <display7SEG+0x360>)
 8000a3e:	f001 f890 	bl	8001b62 <HAL_GPIO_WritePin>
			  break;
 8000a42:	e023      	b.n	8000a8c <display7SEG+0x358>
		}
		default:
			  HAL_GPIO_WritePin(GPIOA, a_Pin, SET);	//special
 8000a44:	2201      	movs	r2, #1
 8000a46:	2102      	movs	r1, #2
 8000a48:	4812      	ldr	r0, [pc, #72]	; (8000a94 <display7SEG+0x360>)
 8000a4a:	f001 f88a 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, b_Pin, SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2104      	movs	r1, #4
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <display7SEG+0x360>)
 8000a54:	f001 f885 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, c_Pin, SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <display7SEG+0x360>)
 8000a5e:	f001 f880 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, d_Pin, SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2110      	movs	r1, #16
 8000a66:	480b      	ldr	r0, [pc, #44]	; (8000a94 <display7SEG+0x360>)
 8000a68:	f001 f87b 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, e_Pin, SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <display7SEG+0x360>)
 8000a72:	f001 f876 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, f_Pin, SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <display7SEG+0x360>)
 8000a7c:	f001 f871 	bl	8001b62 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, g_Pin, RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2180      	movs	r1, #128	; 0x80
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <display7SEG+0x360>)
 8000a86:	f001 f86c 	bl	8001b62 <HAL_GPIO_WritePin>
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40010800 	.word	0x40010800

08000a98 <update7SEG>:
const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {0, 0, 0, 0};
void update7SEG(int index)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	switch(index)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	f200 8094 	bhi.w	8000bd0 <update7SEG+0x138>
 8000aa8:	a201      	add	r2, pc, #4	; (adr r2, 8000ab0 <update7SEG+0x18>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000ac1 	.word	0x08000ac1
 8000ab4:	08000af5 	.word	0x08000af5
 8000ab8:	08000b49 	.word	0x08000b49
 8000abc:	08000b7d 	.word	0x08000b7d
	{
		case 0:
		{
			HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4847      	ldr	r0, [pc, #284]	; (8000be4 <update7SEG+0x14c>)
 8000ac6:	f001 f84c 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2110      	movs	r1, #16
 8000ace:	4845      	ldr	r0, [pc, #276]	; (8000be4 <update7SEG+0x14c>)
 8000ad0:	f001 f847 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4842      	ldr	r0, [pc, #264]	; (8000be4 <update7SEG+0x14c>)
 8000ada:	f001 f842 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	4840      	ldr	r0, [pc, #256]	; (8000be4 <update7SEG+0x14c>)
 8000ae4:	f001 f83d 	bl	8001b62 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000ae8:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <update7SEG+0x150>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe21 	bl	8000734 <display7SEG>
			break;
 8000af2:	e072      	b.n	8000bda <update7SEG+0x142>
		}
		case 1:
		{
			HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2108      	movs	r1, #8
 8000af8:	483a      	ldr	r0, [pc, #232]	; (8000be4 <update7SEG+0x14c>)
 8000afa:	f001 f832 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2110      	movs	r1, #16
 8000b02:	4838      	ldr	r0, [pc, #224]	; (8000be4 <update7SEG+0x14c>)
 8000b04:	f001 f82d 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	4835      	ldr	r0, [pc, #212]	; (8000be4 <update7SEG+0x14c>)
 8000b0e:	f001 f828 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	4833      	ldr	r0, [pc, #204]	; (8000be4 <update7SEG+0x14c>)
 8000b18:	f001 f823 	bl	8001b62 <HAL_GPIO_WritePin>
			if (mode_flag == 1)
 8000b1c:	4b33      	ldr	r3, [pc, #204]	; (8000bec <update7SEG+0x154>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d104      	bne.n	8000b2e <update7SEG+0x96>
			{
				display7SEG(led_buffer[1]);
 8000b24:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <update7SEG+0x150>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fe03 	bl	8000734 <display7SEG>
			}
			if (mode_flag == 0)
 8000b2e:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <update7SEG+0x154>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d14e      	bne.n	8000bd4 <update7SEG+0x13c>
			{
				display7SEG(led_buffer[1]--);
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <update7SEG+0x150>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	492a      	ldr	r1, [pc, #168]	; (8000be8 <update7SEG+0x150>)
 8000b3e:	604a      	str	r2, [r1, #4]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fdf7 	bl	8000734 <display7SEG>
			}
			break;
 8000b46:	e045      	b.n	8000bd4 <update7SEG+0x13c>
		}
		case 2:
		{
			HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	4825      	ldr	r0, [pc, #148]	; (8000be4 <update7SEG+0x14c>)
 8000b4e:	f001 f808 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2110      	movs	r1, #16
 8000b56:	4823      	ldr	r0, [pc, #140]	; (8000be4 <update7SEG+0x14c>)
 8000b58:	f001 f803 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2120      	movs	r1, #32
 8000b60:	4820      	ldr	r0, [pc, #128]	; (8000be4 <update7SEG+0x14c>)
 8000b62:	f000 fffe 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2140      	movs	r1, #64	; 0x40
 8000b6a:	481e      	ldr	r0, [pc, #120]	; (8000be4 <update7SEG+0x14c>)
 8000b6c:	f000 fff9 	bl	8001b62 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <update7SEG+0x150>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fddd 	bl	8000734 <display7SEG>
			break;
 8000b7a:	e02e      	b.n	8000bda <update7SEG+0x142>
		}
		case 3:
		{
			HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2108      	movs	r1, #8
 8000b80:	4818      	ldr	r0, [pc, #96]	; (8000be4 <update7SEG+0x14c>)
 8000b82:	f000 ffee 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4816      	ldr	r0, [pc, #88]	; (8000be4 <update7SEG+0x14c>)
 8000b8c:	f000 ffe9 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2120      	movs	r1, #32
 8000b94:	4813      	ldr	r0, [pc, #76]	; (8000be4 <update7SEG+0x14c>)
 8000b96:	f000 ffe4 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	; 0x40
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <update7SEG+0x14c>)
 8000ba0:	f000 ffdf 	bl	8001b62 <HAL_GPIO_WritePin>
			if (mode_flag == 1)
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <update7SEG+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <update7SEG+0x11e>
			{
				display7SEG(led_buffer[3]);
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <update7SEG+0x150>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fdbf 	bl	8000734 <display7SEG>
			}
			if (mode_flag == 0)
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <update7SEG+0x154>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10c      	bne.n	8000bd8 <update7SEG+0x140>
			{
				display7SEG(led_buffer[3]--);
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <update7SEG+0x150>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	1e5a      	subs	r2, r3, #1
 8000bc4:	4908      	ldr	r1, [pc, #32]	; (8000be8 <update7SEG+0x150>)
 8000bc6:	60ca      	str	r2, [r1, #12]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fdb3 	bl	8000734 <display7SEG>
			}
			break;
 8000bce:	e003      	b.n	8000bd8 <update7SEG+0x140>
		}
		default:
			break;
 8000bd0:	bf00      	nop
 8000bd2:	e002      	b.n	8000bda <update7SEG+0x142>
			break;
 8000bd4:	bf00      	nop
 8000bd6:	e000      	b.n	8000bda <update7SEG+0x142>
			break;
 8000bd8:	bf00      	nop
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010c00 	.word	0x40010c00
 8000be8:	200000d4 	.word	0x200000d4
 8000bec:	20000080 	.word	0x20000080

08000bf0 <updateBuffer>:

void updateBuffer (int index, int time)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
	if (index == 1 || index == 3)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d002      	beq.n	8000c06 <updateBuffer+0x16>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d126      	bne.n	8000c54 <updateBuffer+0x64>
	{
		if (time <= 9)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b09      	cmp	r3, #9
 8000c0a:	dc04      	bgt.n	8000c16 <updateBuffer+0x26>
		{
			led_buffer[index] = time;
 8000c0c:	4919      	ldr	r1, [pc, #100]	; (8000c74 <updateBuffer+0x84>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (time > 9)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b09      	cmp	r3, #9
 8000c1a:	dd1b      	ble.n	8000c54 <updateBuffer+0x64>
		{
			led_buffer[index-1] = time/10;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	4915      	ldr	r1, [pc, #84]	; (8000c78 <updateBuffer+0x88>)
 8000c24:	fb81 0103 	smull	r0, r1, r1, r3
 8000c28:	1089      	asrs	r1, r1, #2
 8000c2a:	17db      	asrs	r3, r3, #31
 8000c2c:	1acb      	subs	r3, r1, r3
 8000c2e:	4911      	ldr	r1, [pc, #68]	; (8000c74 <updateBuffer+0x84>)
 8000c30:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
			led_buffer[index] = time%10;
 8000c34:	6839      	ldr	r1, [r7, #0]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <updateBuffer+0x88>)
 8000c38:	fb83 2301 	smull	r2, r3, r3, r1
 8000c3c:	109a      	asrs	r2, r3, #2
 8000c3e:	17cb      	asrs	r3, r1, #31
 8000c40:	1ad2      	subs	r2, r2, r3
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	1aca      	subs	r2, r1, r3
 8000c4c:	4909      	ldr	r1, [pc, #36]	; (8000c74 <updateBuffer+0x84>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
	if (index == 0 || index == 2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <updateBuffer+0x70>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d104      	bne.n	8000c6a <updateBuffer+0x7a>
	{
		led_buffer[index] = time;
 8000c60:	4904      	ldr	r1, [pc, #16]	; (8000c74 <updateBuffer+0x84>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	200000d4 	.word	0x200000d4
 8000c78:	66666667 	.word	0x66666667

08000c7c <led_buffer_edit>:

void led_buffer_edit()
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
	if (led_buffer[3] < 0 && led_buffer[2] > 0)
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	da0b      	bge.n	8000ca0 <led_buffer_edit+0x24>
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dd07      	ble.n	8000ca0 <led_buffer_edit+0x24>
	{
		led_buffer[3] = 9;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000c92:	2209      	movs	r2, #9
 8000c94:	60da      	str	r2, [r3, #12]
		led_buffer[2]--;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000c9e:	6093      	str	r3, [r2, #8]
	}
	if (led_buffer[1] < 0 && led_buffer[0] > 0)
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	da0b      	bge.n	8000cc0 <led_buffer_edit+0x44>
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dd07      	ble.n	8000cc0 <led_buffer_edit+0x44>
	{
		led_buffer[1] = 9;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000cb2:	2209      	movs	r2, #9
 8000cb4:	605a      	str	r2, [r3, #4]
		led_buffer[0]--;
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	4a02      	ldr	r2, [pc, #8]	; (8000cc8 <led_buffer_edit+0x4c>)
 8000cbe:	6013      	str	r3, [r2, #0]
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	200000d4 	.word	0x200000d4

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd0:	f000 fc44 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd4:	f000 f8a0 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd8:	f000 f926 	bl	8000f28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cdc:	f000 f8d8 	bl	8000e90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000ce0:	4848      	ldr	r0, [pc, #288]	; (8000e04 <main+0x138>)
 8000ce2:	f001 fb85 	bl	80023f0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000ce6:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <main+0x13c>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
  setTimer2(25);
 8000cec:	2019      	movs	r0, #25
 8000cee:	f000 fbb9 	bl	8001464 <setTimer2>
  while (1)
  {
    /* USER CODE END WHILE */
	    fsm_run();
 8000cf2:	f7ff fb87 	bl	8000404 <fsm_run>
	    manual_run();
 8000cf6:	f000 f99d 	bl	8001034 <manual_run>
	  	if (index_led >= 5) index_led = 0;
 8000cfa:	4b44      	ldr	r3, [pc, #272]	; (8000e0c <main+0x140>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	dd02      	ble.n	8000d08 <main+0x3c>
 8000d02:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <main+0x140>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
	  	led_buffer_edit();
 8000d08:	f7ff ffb8 	bl	8000c7c <led_buffer_edit>
	  	if( timer2_flag == 1 && index_led == 0)
 8000d0c:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <main+0x144>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d110      	bne.n	8000d36 <main+0x6a>
 8000d14:	4b3d      	ldr	r3, [pc, #244]	; (8000e0c <main+0x140>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d10c      	bne.n	8000d36 <main+0x6a>
	  	{
	  		update7SEG(index_led);
 8000d1c:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <main+0x140>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff feb9 	bl	8000a98 <update7SEG>
			setTimer2(20);
 8000d26:	2014      	movs	r0, #20
 8000d28:	f000 fb9c 	bl	8001464 <setTimer2>
			index_led++;
 8000d2c:	4b37      	ldr	r3, [pc, #220]	; (8000e0c <main+0x140>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a36      	ldr	r2, [pc, #216]	; (8000e0c <main+0x140>)
 8000d34:	6013      	str	r3, [r2, #0]
		}

		if( timer2_flag == 1 && index_led == 1)
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <main+0x144>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d110      	bne.n	8000d60 <main+0x94>
 8000d3e:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <main+0x140>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d10c      	bne.n	8000d60 <main+0x94>
		{
	  		update7SEG(index_led);
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <main+0x140>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fea4 	bl	8000a98 <update7SEG>
			setTimer2(20);
 8000d50:	2014      	movs	r0, #20
 8000d52:	f000 fb87 	bl	8001464 <setTimer2>
			index_led++;
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <main+0x140>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <main+0x140>)
 8000d5e:	6013      	str	r3, [r2, #0]
		}
		if( timer2_flag == 1 && index_led == 2)
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <main+0x144>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d110      	bne.n	8000d8a <main+0xbe>
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <main+0x140>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d10c      	bne.n	8000d8a <main+0xbe>
		{
	  		update7SEG(index_led);
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <main+0x140>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fe8f 	bl	8000a98 <update7SEG>
			setTimer2(20);
 8000d7a:	2014      	movs	r0, #20
 8000d7c:	f000 fb72 	bl	8001464 <setTimer2>
			index_led++;
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <main+0x140>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <main+0x140>)
 8000d88:	6013      	str	r3, [r2, #0]
		}
		if( timer2_flag == 1 && index_led == 3)
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <main+0x144>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d110      	bne.n	8000db4 <main+0xe8>
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <main+0x140>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d10c      	bne.n	8000db4 <main+0xe8>
		{
	  		update7SEG(index_led);
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <main+0x140>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fe7a 	bl	8000a98 <update7SEG>
			setTimer2(20);
 8000da4:	2014      	movs	r0, #20
 8000da6:	f000 fb5d 	bl	8001464 <setTimer2>
			index_led++;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <main+0x140>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <main+0x140>)
 8000db2:	6013      	str	r3, [r2, #0]
		}
		if (timer2_flag == 1 && index_led == 4)
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <main+0x144>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d19a      	bne.n	8000cf2 <main+0x26>
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <main+0x140>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d196      	bne.n	8000cf2 <main+0x26>
		{
			HAL_GPIO_WritePin(seg1_GPIO_Port, seg1_Pin, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <main+0x148>)
 8000dca:	f000 feca 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg2_GPIO_Port, seg2_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	4810      	ldr	r0, [pc, #64]	; (8000e14 <main+0x148>)
 8000dd4:	f000 fec5 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg3_GPIO_Port, seg3_Pin, RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2120      	movs	r1, #32
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <main+0x148>)
 8000dde:	f000 fec0 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg4_GPIO_Port, seg4_Pin, RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2140      	movs	r1, #64	; 0x40
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <main+0x148>)
 8000de8:	f000 febb 	bl	8001b62 <HAL_GPIO_WritePin>
			display7SEG(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f7ff fca1 	bl	8000734 <display7SEG>
			setTimer2(20);
 8000df2:	2014      	movs	r0, #20
 8000df4:	f000 fb36 	bl	8001464 <setTimer2>
			index_led++;
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <main+0x140>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <main+0x140>)
 8000e00:	6013      	str	r3, [r2, #0]
	    fsm_run();
 8000e02:	e776      	b.n	8000cf2 <main+0x26>
 8000e04:	20000088 	.word	0x20000088
 8000e08:	2000007c 	.word	0x2000007c
 8000e0c:	200000d0 	.word	0x200000d0
 8000e10:	200000f0 	.word	0x200000f0
 8000e14:	40010c00 	.word	0x40010c00

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fe9e 	bl	8002b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e42:	2310      	movs	r3, #16
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fea0 	bl	8001b94 <HAL_RCC_OscConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e5a:	f000 f8e5 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	230f      	movs	r3, #15
 8000e60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f90e 	bl	8002098 <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e82:	f000 f8d1 	bl	8001028 <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3740      	adds	r7, #64	; 0x40
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eb6:	2209      	movs	r2, #9
 8000eb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ec2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ec6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed6:	f001 fa3b 	bl	8002350 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee0:	f000 f8a2 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ef2:	f001 fbd1 	bl	8002698 <HAL_TIM_ConfigClockSource>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 f894 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000f0e:	f001 fd9d 	bl	8002a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f000 f886 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000088 	.word	0x20000088

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, a_Pin|b_Pin|c_Pin|d_Pin
 8000f84:	2200      	movs	r2, #0
 8000f86:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 8000f8a:	481c      	ldr	r0, [pc, #112]	; (8000ffc <MX_GPIO_Init+0xd4>)
 8000f8c:	f000 fde9 	bl	8001b62 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin|red_Pin
                          |yellow_Pin|green_Pin|red2_Pin|yellow2_Pin
                          |green2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, seg1_Pin|seg2_Pin|seg3_Pin|seg4_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2178      	movs	r1, #120	; 0x78
 8000f94:	481a      	ldr	r0, [pc, #104]	; (8001000 <MX_GPIO_Init+0xd8>)
 8000f96:	f000 fde4 	bl	8001b62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button_Pin|button2_Pin|button3_Pin;
 8000f9a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <MX_GPIO_Init+0xdc>)
 8000fb0:	f000 fc44 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin red_Pin
                           yellow_Pin green_Pin red2_Pin yellow2_Pin
                           green2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8000fb4:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8000fb8:	613b      	str	r3, [r7, #16]
                          |e_Pin|f_Pin|g_Pin|red_Pin
                          |yellow_Pin|green_Pin|red2_Pin|yellow2_Pin
                          |green2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <MX_GPIO_Init+0xd4>)
 8000fce:	f000 fc35 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : seg1_Pin seg2_Pin seg3_Pin seg4_Pin */
  GPIO_InitStruct.Pin = seg1_Pin|seg2_Pin|seg3_Pin|seg4_Pin;
 8000fd2:	2378      	movs	r3, #120	; 0x78
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_GPIO_Init+0xd8>)
 8000fea:	f000 fc27 	bl	800183c <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40011000 	.word	0x40011000

08001008 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	TimerRun();
 8001010:	f000 fa3c 	bl	800148c <TimerRun>
	getKeyInput_1();
 8001014:	f7ff f8b8 	bl	8000188 <getKeyInput_1>
	getKeyInput_2();
 8001018:	f7ff f92a 	bl	8000270 <getKeyInput_2>
	getKeyInput_3();
 800101c:	f7ff f99c 	bl	8000358 <getKeyInput_3>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <manual_run>:
 */

#include "manual.h"

void manual_run()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	switch (status)
 8001038:	4bb8      	ldr	r3, [pc, #736]	; (800131c <manual_run+0x2e8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b0d      	cmp	r3, #13
 800103e:	f000 80f4 	beq.w	800122a <manual_run+0x1f6>
 8001042:	2b0d      	cmp	r3, #13
 8001044:	f300 8163 	bgt.w	800130e <manual_run+0x2da>
 8001048:	2b0b      	cmp	r3, #11
 800104a:	d002      	beq.n	8001052 <manual_run+0x1e>
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d076      	beq.n	800113e <manual_run+0x10a>
				updateBuffer(2, 0);
				status = INIT;
			}
			break;
		default:
			break;
 8001050:	e15d      	b.n	800130e <manual_run+0x2da>
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	48b1      	ldr	r0, [pc, #708]	; (8001320 <manual_run+0x2ec>)
 800105a:	f000 fd82 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001064:	48ae      	ldr	r0, [pc, #696]	; (8001320 <manual_run+0x2ec>)
 8001066:	f000 fd7c 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001070:	48ab      	ldr	r0, [pc, #684]	; (8001320 <manual_run+0x2ec>)
 8001072:	f000 fd76 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107c:	48a8      	ldr	r0, [pc, #672]	; (8001320 <manual_run+0x2ec>)
 800107e:	f000 fd70 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001088:	48a5      	ldr	r0, [pc, #660]	; (8001320 <manual_run+0x2ec>)
 800108a:	f000 fd6a 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001094:	48a2      	ldr	r0, [pc, #648]	; (8001320 <manual_run+0x2ec>)
 8001096:	f000 fd64 	bl	8001b62 <HAL_GPIO_WritePin>
			updateBuffer(0, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fda7 	bl	8000bf0 <updateBuffer>
			updateBuffer(1, settime);
 80010a2:	4ba0      	ldr	r3, [pc, #640]	; (8001324 <manual_run+0x2f0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff fda1 	bl	8000bf0 <updateBuffer>
			updateBuffer(2, 0);
 80010ae:	2100      	movs	r1, #0
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff fd9d 	bl	8000bf0 <updateBuffer>
			updateBuffer(3, settime);
 80010b6:	4b9b      	ldr	r3, [pc, #620]	; (8001324 <manual_run+0x2f0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	2003      	movs	r0, #3
 80010be:	f7ff fd97 	bl	8000bf0 <updateBuffer>
			mode_flag = 1;
 80010c2:	4b99      	ldr	r3, [pc, #612]	; (8001328 <manual_run+0x2f4>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
			if (isButton1Pressed() == 1)
 80010c8:	f7ff f840 	bl	800014c <isButton1Pressed>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d105      	bne.n	80010de <manual_run+0xaa>
				settime = 0;
 80010d2:	4b94      	ldr	r3, [pc, #592]	; (8001324 <manual_run+0x2f0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
				status = MAN_YELLOW;
 80010d8:	4b90      	ldr	r3, [pc, #576]	; (800131c <manual_run+0x2e8>)
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
			if (isButton2Pressed() == 1)
 80010de:	f7ff f8a9 	bl	8000234 <isButton2Pressed>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d111      	bne.n	800110c <manual_run+0xd8>
				settime++;
 80010e8:	4b8e      	ldr	r3, [pc, #568]	; (8001324 <manual_run+0x2f0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a8d      	ldr	r2, [pc, #564]	; (8001324 <manual_run+0x2f0>)
 80010f0:	6013      	str	r3, [r2, #0]
				if (settime >= 100)
 80010f2:	4b8c      	ldr	r3, [pc, #560]	; (8001324 <manual_run+0x2f0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b63      	cmp	r3, #99	; 0x63
 80010f8:	dd02      	ble.n	8001100 <manual_run+0xcc>
					settime = 0;
 80010fa:	4b8a      	ldr	r3, [pc, #552]	; (8001324 <manual_run+0x2f0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
				updateBuffer(1, settime);
 8001100:	4b88      	ldr	r3, [pc, #544]	; (8001324 <manual_run+0x2f0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff fd72 	bl	8000bf0 <updateBuffer>
			if (isButton3Pressed() == 1)
 800110c:	f7ff f906 	bl	800031c <isButton3Pressed>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	f040 80fd 	bne.w	8001312 <manual_run+0x2de>
				red_time = settime;
 8001118:	4b82      	ldr	r3, [pc, #520]	; (8001324 <manual_run+0x2f0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a83      	ldr	r2, [pc, #524]	; (800132c <manual_run+0x2f8>)
 800111e:	6013      	str	r3, [r2, #0]
				settime = 0;
 8001120:	4b80      	ldr	r3, [pc, #512]	; (8001324 <manual_run+0x2f0>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
				updateBuffer(0, 0);
 8001126:	2100      	movs	r1, #0
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fd61 	bl	8000bf0 <updateBuffer>
				updateBuffer(2, 0);
 800112e:	2100      	movs	r1, #0
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff fd5d 	bl	8000bf0 <updateBuffer>
				status = MAN_YELLOW;
 8001136:	4b79      	ldr	r3, [pc, #484]	; (800131c <manual_run+0x2e8>)
 8001138:	220c      	movs	r2, #12
 800113a:	601a      	str	r2, [r3, #0]
			break;
 800113c:	e0e9      	b.n	8001312 <manual_run+0x2de>
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001144:	4876      	ldr	r0, [pc, #472]	; (8001320 <manual_run+0x2ec>)
 8001146:	f000 fd0c 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	4873      	ldr	r0, [pc, #460]	; (8001320 <manual_run+0x2ec>)
 8001152:	f000 fd06 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115c:	4870      	ldr	r0, [pc, #448]	; (8001320 <manual_run+0x2ec>)
 800115e:	f000 fd00 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001168:	486d      	ldr	r0, [pc, #436]	; (8001320 <manual_run+0x2ec>)
 800116a:	f000 fcfa 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001174:	486a      	ldr	r0, [pc, #424]	; (8001320 <manual_run+0x2ec>)
 8001176:	f000 fcf4 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001180:	4867      	ldr	r0, [pc, #412]	; (8001320 <manual_run+0x2ec>)
 8001182:	f000 fcee 	bl	8001b62 <HAL_GPIO_WritePin>
			updateBuffer(0, 0);
 8001186:	2100      	movs	r1, #0
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fd31 	bl	8000bf0 <updateBuffer>
			updateBuffer(1, settime);
 800118e:	4b65      	ldr	r3, [pc, #404]	; (8001324 <manual_run+0x2f0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff fd2b 	bl	8000bf0 <updateBuffer>
			updateBuffer(2, 0);
 800119a:	2100      	movs	r1, #0
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff fd27 	bl	8000bf0 <updateBuffer>
			updateBuffer(3, settime);
 80011a2:	4b60      	ldr	r3, [pc, #384]	; (8001324 <manual_run+0x2f0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	2003      	movs	r0, #3
 80011aa:	f7ff fd21 	bl	8000bf0 <updateBuffer>
			mode_flag = 1;
 80011ae:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <manual_run+0x2f4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
			if (isButton1Pressed() == 1)
 80011b4:	f7fe ffca 	bl	800014c <isButton1Pressed>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d105      	bne.n	80011ca <manual_run+0x196>
				settime = 0;
 80011be:	4b59      	ldr	r3, [pc, #356]	; (8001324 <manual_run+0x2f0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
				status = MAN_GREEN;
 80011c4:	4b55      	ldr	r3, [pc, #340]	; (800131c <manual_run+0x2e8>)
 80011c6:	220d      	movs	r2, #13
 80011c8:	601a      	str	r2, [r3, #0]
			if (isButton2Pressed() == 1)
 80011ca:	f7ff f833 	bl	8000234 <isButton2Pressed>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d111      	bne.n	80011f8 <manual_run+0x1c4>
				settime++;
 80011d4:	4b53      	ldr	r3, [pc, #332]	; (8001324 <manual_run+0x2f0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a52      	ldr	r2, [pc, #328]	; (8001324 <manual_run+0x2f0>)
 80011dc:	6013      	str	r3, [r2, #0]
				if (settime >= 100)
 80011de:	4b51      	ldr	r3, [pc, #324]	; (8001324 <manual_run+0x2f0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b63      	cmp	r3, #99	; 0x63
 80011e4:	dd02      	ble.n	80011ec <manual_run+0x1b8>
					settime = 0;
 80011e6:	4b4f      	ldr	r3, [pc, #316]	; (8001324 <manual_run+0x2f0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
				updateBuffer(1, settime);
 80011ec:	4b4d      	ldr	r3, [pc, #308]	; (8001324 <manual_run+0x2f0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fcfc 	bl	8000bf0 <updateBuffer>
			if (isButton3Pressed() == 1)
 80011f8:	f7ff f890 	bl	800031c <isButton3Pressed>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	f040 8089 	bne.w	8001316 <manual_run+0x2e2>
				yellow_time = settime;
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <manual_run+0x2f0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a49      	ldr	r2, [pc, #292]	; (8001330 <manual_run+0x2fc>)
 800120a:	6013      	str	r3, [r2, #0]
				settime = 0;
 800120c:	4b45      	ldr	r3, [pc, #276]	; (8001324 <manual_run+0x2f0>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
				updateBuffer(0, 0);
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff fceb 	bl	8000bf0 <updateBuffer>
				updateBuffer(2, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff fce7 	bl	8000bf0 <updateBuffer>
				status = MAN_GREEN;
 8001222:	4b3e      	ldr	r3, [pc, #248]	; (800131c <manual_run+0x2e8>)
 8001224:	220d      	movs	r2, #13
 8001226:	601a      	str	r2, [r3, #0]
			break;
 8001228:	e075      	b.n	8001316 <manual_run+0x2e2>
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001230:	483b      	ldr	r0, [pc, #236]	; (8001320 <manual_run+0x2ec>)
 8001232:	f000 fc96 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123c:	4838      	ldr	r0, [pc, #224]	; (8001320 <manual_run+0x2ec>)
 800123e:	f000 fc90 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001248:	4835      	ldr	r0, [pc, #212]	; (8001320 <manual_run+0x2ec>)
 800124a:	f000 fc8a 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001254:	4832      	ldr	r0, [pc, #200]	; (8001320 <manual_run+0x2ec>)
 8001256:	f000 fc84 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001260:	482f      	ldr	r0, [pc, #188]	; (8001320 <manual_run+0x2ec>)
 8001262:	f000 fc7e 	bl	8001b62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	482c      	ldr	r0, [pc, #176]	; (8001320 <manual_run+0x2ec>)
 800126e:	f000 fc78 	bl	8001b62 <HAL_GPIO_WritePin>
			updateBuffer(0, 0);
 8001272:	2100      	movs	r1, #0
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fcbb 	bl	8000bf0 <updateBuffer>
			updateBuffer(1, settime);
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <manual_run+0x2f0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fcb5 	bl	8000bf0 <updateBuffer>
			updateBuffer(2, 0);
 8001286:	2100      	movs	r1, #0
 8001288:	2002      	movs	r0, #2
 800128a:	f7ff fcb1 	bl	8000bf0 <updateBuffer>
			updateBuffer(3, settime);
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <manual_run+0x2f0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	2003      	movs	r0, #3
 8001296:	f7ff fcab 	bl	8000bf0 <updateBuffer>
			mode_flag = 1;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <manual_run+0x2f4>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
			if (isButton1Pressed() == 1)
 80012a0:	f7fe ff54 	bl	800014c <isButton1Pressed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d105      	bne.n	80012b6 <manual_run+0x282>
				settime = 0;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <manual_run+0x2f0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
				status = INIT;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <manual_run+0x2e8>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
			if (isButton2Pressed() == 1)
 80012b6:	f7fe ffbd 	bl	8000234 <isButton2Pressed>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d10b      	bne.n	80012d8 <manual_run+0x2a4>
				settime++;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <manual_run+0x2f0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <manual_run+0x2f0>)
 80012c8:	6013      	str	r3, [r2, #0]
				if (settime >= 100)
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <manual_run+0x2f0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b63      	cmp	r3, #99	; 0x63
 80012d0:	dd02      	ble.n	80012d8 <manual_run+0x2a4>
					settime = 0;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <manual_run+0x2f0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
			if (isButton3Pressed() == 1)
 80012d8:	f7ff f820 	bl	800031c <isButton3Pressed>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d12a      	bne.n	8001338 <manual_run+0x304>
				green_time = settime;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <manual_run+0x2f0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <manual_run+0x300>)
 80012e8:	6013      	str	r3, [r2, #0]
				settime = 0;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <manual_run+0x2f0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
				mode_flag = 0;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <manual_run+0x2f4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
				updateBuffer(0, 0);
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fc79 	bl	8000bf0 <updateBuffer>
				updateBuffer(2, 0);
 80012fe:	2100      	movs	r1, #0
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff fc75 	bl	8000bf0 <updateBuffer>
				status = INIT;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <manual_run+0x2e8>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
			break;
 800130c:	e014      	b.n	8001338 <manual_run+0x304>
			break;
 800130e:	bf00      	nop
 8001310:	e013      	b.n	800133a <manual_run+0x306>
			break;
 8001312:	bf00      	nop
 8001314:	e011      	b.n	800133a <manual_run+0x306>
			break;
 8001316:	bf00      	nop
 8001318:	e00f      	b.n	800133a <manual_run+0x306>
 800131a:	bf00      	nop
 800131c:	2000007c 	.word	0x2000007c
 8001320:	40010800 	.word	0x40010800
 8001324:	20000084 	.word	0x20000084
 8001328:	20000080 	.word	0x20000080
 800132c:	2000003c 	.word	0x2000003c
 8001330:	20000040 	.word	0x20000040
 8001334:	20000044 	.word	0x20000044
			break;
 8001338:	bf00      	nop
	}
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_MspInit+0x40>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_MspInit+0x40>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_MspInit+0x40>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_MspInit+0x40>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_MspInit+0x40>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_MspInit+0x40>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001394:	d113      	bne.n	80013be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_TIM_Base_MspInit+0x44>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_TIM_Base_MspInit+0x44>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_TIM_Base_MspInit+0x44>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201c      	movs	r0, #28
 80013b4:	f000 fa0b 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b8:	201c      	movs	r0, #28
 80013ba:	f000 fa24 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001412:	f000 f8e9 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <TIM2_IRQHandler+0x10>)
 8001422:	f001 f831 	bl	8002488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000088 	.word	0x20000088

08001430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <setTimer1>:
int timer2_flag = 0;
int timer3_counter =0;
int timer3_flag = 0;

void setTimer1(int duration)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	timer1_counter =  duration;
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <setTimer1+0x20>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <setTimer1+0x24>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	200000e4 	.word	0x200000e4
 8001460:	200000e8 	.word	0x200000e8

08001464 <setTimer2>:
void setTimer2(int duration)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	timer2_counter =  duration;
 800146c:	4a05      	ldr	r2, [pc, #20]	; (8001484 <setTimer2+0x20>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <setTimer2+0x24>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200000ec 	.word	0x200000ec
 8001488:	200000f0 	.word	0x200000f0

0800148c <TimerRun>:
	timer3_counter =  duration;
	timer3_flag = 0;
}

void TimerRun()
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	if (timer1_counter > 0)
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <TimerRun+0x6c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	dd0b      	ble.n	80014b0 <TimerRun+0x24>
	{
		timer1_counter--;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <TimerRun+0x6c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <TimerRun+0x6c>)
 80014a0:	6013      	str	r3, [r2, #0]
		if (timer1_counter <=0)
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <TimerRun+0x6c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dc02      	bgt.n	80014b0 <TimerRun+0x24>
		{
			timer1_flag = 1;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <TimerRun+0x70>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <TimerRun+0x74>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd0b      	ble.n	80014d0 <TimerRun+0x44>
	{
		timer2_counter--;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <TimerRun+0x74>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <TimerRun+0x74>)
 80014c0:	6013      	str	r3, [r2, #0]
		if (timer2_counter <=0)
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <TimerRun+0x74>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dc02      	bgt.n	80014d0 <TimerRun+0x44>
		{
			timer2_flag = 1;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <TimerRun+0x78>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0)
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <TimerRun+0x7c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd0b      	ble.n	80014f0 <TimerRun+0x64>
	{
		timer3_counter--;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <TimerRun+0x7c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <TimerRun+0x7c>)
 80014e0:	6013      	str	r3, [r2, #0]
		if (timer3_counter <=0)
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <TimerRun+0x7c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dc02      	bgt.n	80014f0 <TimerRun+0x64>
		{
			timer3_flag = 1;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <TimerRun+0x80>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	200000e4 	.word	0x200000e4
 80014fc:	200000e8 	.word	0x200000e8
 8001500:	200000ec 	.word	0x200000ec
 8001504:	200000f0 	.word	0x200000f0
 8001508:	200000f4 	.word	0x200000f4
 800150c:	200000f8 	.word	0x200000f8

08001510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001510:	f7ff ff8e 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001516:	490c      	ldr	r1, [pc, #48]	; (8001548 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <LoopFillZerobss+0x16>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800152c:	4c09      	ldr	r4, [pc, #36]	; (8001554 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153a:	f001 faf1 	bl	8002b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153e:	f7ff fbc5 	bl	8000ccc <main>
  bx lr
 8001542:	4770      	bx	lr
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800154c:	08002bbc 	.word	0x08002bbc
  ldr r2, =_sbss
 8001550:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001554:	20000100 	.word	0x20000100

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x28>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x28>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f923 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fee2 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022000 	.word	0x40022000

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f93b 	bl	8001822 <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f903 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000048 	.word	0x20000048
 80015e0:	20000050 	.word	0x20000050
 80015e4:	2000004c 	.word	0x2000004c

080015e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x1c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x20>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x20>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000050 	.word	0x20000050
 8001608:	200000fc 	.word	0x200000fc

0800160c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_GetTick+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	200000fc 	.word	0x200000fc

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4906      	ldr	r1, [pc, #24]	; (80016b8 <__NVIC_EnableIRQ+0x34>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff90 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff2d 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff42 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff90 	bl	8001710 <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5f 	bl	80016bc <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff35 	bl	8001684 <__NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffa2 	bl	8001774 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b08b      	sub	sp, #44	; 0x2c
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e161      	b.n	8001b14 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001850:	2201      	movs	r2, #1
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8150 	bne.w	8001b0e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a97      	ldr	r2, [pc, #604]	; (8001ad0 <HAL_GPIO_Init+0x294>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d05e      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001878:	4a95      	ldr	r2, [pc, #596]	; (8001ad0 <HAL_GPIO_Init+0x294>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d875      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800187e:	4a95      	ldr	r2, [pc, #596]	; (8001ad4 <HAL_GPIO_Init+0x298>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d058      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001884:	4a93      	ldr	r2, [pc, #588]	; (8001ad4 <HAL_GPIO_Init+0x298>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d86f      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800188a:	4a93      	ldr	r2, [pc, #588]	; (8001ad8 <HAL_GPIO_Init+0x29c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d052      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001890:	4a91      	ldr	r2, [pc, #580]	; (8001ad8 <HAL_GPIO_Init+0x29c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d869      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 8001896:	4a91      	ldr	r2, [pc, #580]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04c      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 800189c:	4a8f      	ldr	r2, [pc, #572]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d863      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018a2:	4a8f      	ldr	r2, [pc, #572]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d046      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 80018a8:	4a8d      	ldr	r2, [pc, #564]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d85d      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d82a      	bhi.n	8001908 <HAL_GPIO_Init+0xcc>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d859      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <HAL_GPIO_Init+0x80>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001911 	.word	0x08001911
 80018c4:	08001923 	.word	0x08001923
 80018c8:	08001965 	.word	0x08001965
 80018cc:	0800196b 	.word	0x0800196b
 80018d0:	0800196b 	.word	0x0800196b
 80018d4:	0800196b 	.word	0x0800196b
 80018d8:	0800196b 	.word	0x0800196b
 80018dc:	0800196b 	.word	0x0800196b
 80018e0:	0800196b 	.word	0x0800196b
 80018e4:	0800196b 	.word	0x0800196b
 80018e8:	0800196b 	.word	0x0800196b
 80018ec:	0800196b 	.word	0x0800196b
 80018f0:	0800196b 	.word	0x0800196b
 80018f4:	0800196b 	.word	0x0800196b
 80018f8:	0800196b 	.word	0x0800196b
 80018fc:	0800196b 	.word	0x0800196b
 8001900:	08001919 	.word	0x08001919
 8001904:	0800192d 	.word	0x0800192d
 8001908:	4a76      	ldr	r2, [pc, #472]	; (8001ae4 <HAL_GPIO_Init+0x2a8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190e:	e02c      	b.n	800196a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e029      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	3304      	adds	r3, #4
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e024      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	3308      	adds	r3, #8
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e01f      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	330c      	adds	r3, #12
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e01a      	b.n	800196c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193e:	2304      	movs	r3, #4
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e013      	b.n	800196c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	611a      	str	r2, [r3, #16]
          break;
 8001956:	e009      	b.n	800196c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	615a      	str	r2, [r3, #20]
          break;
 8001962:	e003      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x130>
          break;
 800196a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d801      	bhi.n	8001976 <HAL_GPIO_Init+0x13a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	e001      	b.n	800197a <HAL_GPIO_Init+0x13e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d802      	bhi.n	8001988 <HAL_GPIO_Init+0x14c>
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x152>
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80a9 	beq.w	8001b0e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d4:	4a45      	ldr	r2, [pc, #276]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3d      	ldr	r2, [pc, #244]	; (8001af0 <HAL_GPIO_Init+0x2b4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_GPIO_Init+0x1e0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3c      	ldr	r2, [pc, #240]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x1dc>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3b      	ldr	r2, [pc, #236]	; (8001af8 <HAL_GPIO_Init+0x2bc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_Init+0x1d8>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e004      	b.n	8001a1e <HAL_GPIO_Init+0x1e2>
 8001a14:	2303      	movs	r3, #3
 8001a16:	e002      	b.n	8001a1e <HAL_GPIO_Init+0x1e2>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_GPIO_Init+0x1e2>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a20:	f002 0203 	and.w	r2, r2, #3
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	4093      	lsls	r3, r2
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a2e:	492f      	ldr	r1, [pc, #188]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	492b      	ldr	r1, [pc, #172]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4927      	ldr	r1, [pc, #156]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	4921      	ldr	r1, [pc, #132]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	491d      	ldr	r1, [pc, #116]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4917      	ldr	r1, [pc, #92]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4913      	ldr	r1, [pc, #76]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01f      	beq.n	8001b00 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	490d      	ldr	r1, [pc, #52]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	e01f      	b.n	8001b0e <HAL_GPIO_Init+0x2d2>
 8001ace:	bf00      	nop
 8001ad0:	10320000 	.word	0x10320000
 8001ad4:	10310000 	.word	0x10310000
 8001ad8:	10220000 	.word	0x10220000
 8001adc:	10210000 	.word	0x10210000
 8001ae0:	10120000 	.word	0x10120000
 8001ae4:	10110000 	.word	0x10110000
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010000 	.word	0x40010000
 8001af0:	40010800 	.word	0x40010800
 8001af4:	40010c00 	.word	0x40010c00
 8001af8:	40011000 	.word	0x40011000
 8001afc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_GPIO_Init+0x2f4>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	4909      	ldr	r1, [pc, #36]	; (8001b30 <HAL_GPIO_Init+0x2f4>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	3301      	adds	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f47f ae96 	bne.w	8001850 <HAL_GPIO_Init+0x14>
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	372c      	adds	r7, #44	; 0x2c
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e001      	b.n	8001b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	807b      	strh	r3, [r7, #2]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b72:	787b      	ldrb	r3, [r7, #1]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b78:	887a      	ldrh	r2, [r7, #2]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	041a      	lsls	r2, r3, #16
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e272      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8087 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb4:	4b92      	ldr	r3, [pc, #584]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d00c      	beq.n	8001bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc0:	4b8f      	ldr	r3, [pc, #572]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d112      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x5e>
 8001bcc:	4b8c      	ldr	r3, [pc, #560]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d06c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x12c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d168      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e24c      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x76>
 8001bfc:	4b80      	ldr	r3, [pc, #512]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a7f      	ldr	r2, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e02e      	b.n	8001c68 <HAL_RCC_OscConfig+0xd4>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x98>
 8001c12:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7a      	ldr	r2, [pc, #488]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b78      	ldr	r3, [pc, #480]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a77      	ldr	r2, [pc, #476]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_RCC_OscConfig+0xd4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0xbc>
 8001c36:	4b72      	ldr	r3, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a71      	ldr	r2, [pc, #452]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b6f      	ldr	r3, [pc, #444]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xd4>
 8001c50:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6a      	ldr	r2, [pc, #424]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a67      	ldr	r2, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fccc 	bl	800160c <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fcc8 	bl	800160c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e200      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b5d      	ldr	r3, [pc, #372]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe4>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fcb8 	bl	800160c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fcb4 	bl	800160c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1ec      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x10c>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d063      	beq.n	8001d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cce:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d11c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x18c>
 8001ce6:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d116      	bne.n	8001d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_RCC_OscConfig+0x176>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1c0      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4939      	ldr	r1, [pc, #228]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	e03a      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fc6d 	bl	800160c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d36:	f7ff fc69 	bl	800160c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e1a1      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4927      	ldr	r1, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e015      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fc4c 	bl	800160c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d78:	f7ff fc48 	bl	800160c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e180      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03a      	beq.n	8001e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d019      	beq.n	8001dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7ff fc2c 	bl	800160c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff fc28 	bl	800160c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e160      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f000 fa9c 	bl	8002314 <RCC_Delay>
 8001ddc:	e01c      	b.n	8001e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7ff fc12 	bl	800160c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dea:	e00f      	b.n	8001e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7ff fc0e 	bl	800160c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d908      	bls.n	8001e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e146      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	42420000 	.word	0x42420000
 8001e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	4b92      	ldr	r3, [pc, #584]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e9      	bne.n	8001dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80a6 	beq.w	8001f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2a:	4b8b      	ldr	r3, [pc, #556]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b88      	ldr	r3, [pc, #544]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a87      	ldr	r2, [pc, #540]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b85      	ldr	r3, [pc, #532]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d118      	bne.n	8001e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5e:	4b7f      	ldr	r3, [pc, #508]	; (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7e      	ldr	r2, [pc, #504]	; (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fbcf 	bl	800160c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e72:	f7ff fbcb 	bl	800160c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b64      	cmp	r3, #100	; 0x64
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e103      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	4b75      	ldr	r3, [pc, #468]	; (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x312>
 8001e98:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	e02d      	b.n	8001f02 <HAL_RCC_OscConfig+0x36e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x334>
 8001eae:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a69      	ldr	r2, [pc, #420]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6213      	str	r3, [r2, #32]
 8001eba:	4b67      	ldr	r3, [pc, #412]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a66      	ldr	r2, [pc, #408]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	e01c      	b.n	8001f02 <HAL_RCC_OscConfig+0x36e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0x356>
 8001ed0:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a60      	ldr	r2, [pc, #384]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	e00b      	b.n	8001f02 <HAL_RCC_OscConfig+0x36e>
 8001eea:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a5a      	ldr	r2, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	4b58      	ldr	r3, [pc, #352]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a57      	ldr	r2, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d015      	beq.n	8001f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fb7f 	bl	800160c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7ff fb7b 	bl	800160c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0b1      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ee      	beq.n	8001f12 <HAL_RCC_OscConfig+0x37e>
 8001f34:	e014      	b.n	8001f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7ff fb69 	bl	800160c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff fb65 	bl	800160c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e09b      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	4b40      	ldr	r3, [pc, #256]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ee      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d105      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d061      	beq.n	800204c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d146      	bne.n	800201e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff fb39 	bl	800160c <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7ff fb35 	bl	800160c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e06d      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d108      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	4921      	ldr	r1, [pc, #132]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a19      	ldr	r1, [r3, #32]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	491b      	ldr	r1, [pc, #108]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4cc>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fb09 	bl	800160c <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7ff fb05 	bl	800160c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e03d      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x46a>
 800201c:	e035      	b.n	800208a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_OscConfig+0x4cc>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff faf2 	bl	800160c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7ff faee 	bl	800160c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e026      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x498>
 800204a:	e01e      	b.n	800208a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d107      	bne.n	8002064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e019      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
 8002058:	40021000 	.word	0x40021000
 800205c:	40007000 	.word	0x40007000
 8002060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x500>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0d0      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d910      	bls.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4965      	ldr	r1, [pc, #404]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b8      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	494d      	ldr	r1, [pc, #308]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d040      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d115      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e07f      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e073      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06b      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f023 0203 	bic.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4936      	ldr	r1, [pc, #216]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002188:	f7ff fa40 	bl	800160c <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7ff fa3c 	bl	800160c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e053      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 020c 	and.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1eb      	bne.n	8002190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d210      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4922      	ldr	r1, [pc, #136]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e032      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4916      	ldr	r1, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002226:	f000 f821 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222a:	4602      	mov	r2, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	490a      	ldr	r1, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1c8>)
 8002238:	5ccb      	ldrb	r3, [r1, r3]
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1cc>)
 8002240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1d0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f99e 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	08002b90 	.word	0x08002b90
 8002264:	20000048 	.word	0x20000048
 8002268:	2000004c 	.word	0x2000004c

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_RCC_GetSysClockFreq+0x94>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b04      	cmp	r3, #4
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x30>
 8002296:	2b08      	cmp	r3, #8
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x36>
 800229a:	e027      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_GetSysClockFreq+0x98>)
 800229e:	613b      	str	r3, [r7, #16]
      break;
 80022a0:	e027      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_RCC_GetSysClockFreq+0x94>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0c5b      	lsrs	r3, r3, #17
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ce:	fb03 f202 	mul.w	r2, r3, r2
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e004      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	613b      	str	r3, [r7, #16]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	613b      	str	r3, [r7, #16]
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	693b      	ldr	r3, [r7, #16]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	007a1200 	.word	0x007a1200
 8002308:	08002ba0 	.word	0x08002ba0
 800230c:	08002bb0 	.word	0x08002bb0
 8002310:	003d0900 	.word	0x003d0900

08002314 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <RCC_Delay+0x34>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <RCC_Delay+0x38>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0a5b      	lsrs	r3, r3, #9
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002330:	bf00      	nop
  }
  while (Delay --);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1e5a      	subs	r2, r3, #1
 8002336:	60fa      	str	r2, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f9      	bne.n	8002330 <RCC_Delay+0x1c>
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	20000048 	.word	0x20000048
 800234c:	10624dd3 	.word	0x10624dd3

08002350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e041      	b.n	80023e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff f804 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	4619      	mov	r1, r3
 800238e:	4610      	mov	r0, r2
 8002390:	f000 fa6e 	bl	8002870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d001      	beq.n	8002408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e035      	b.n	8002474 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a16      	ldr	r2, [pc, #88]	; (8002480 <HAL_TIM_Base_Start_IT+0x90>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d009      	beq.n	800243e <HAL_TIM_Base_Start_IT+0x4e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002432:	d004      	beq.n	800243e <HAL_TIM_Base_Start_IT+0x4e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a12      	ldr	r2, [pc, #72]	; (8002484 <HAL_TIM_Base_Start_IT+0x94>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d111      	bne.n	8002462 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b06      	cmp	r3, #6
 800244e:	d010      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002460:	e007      	b.n	8002472 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40000400 	.word	0x40000400

08002488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d122      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d11b      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0202 	mvn.w	r2, #2
 80024b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f9b4 	bl	8002838 <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f9a7 	bl	8002826 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f9b6 	bl	800284a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0204 	mvn.w	r2, #4
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f98a 	bl	8002838 <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f97d 	bl	8002826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f98c 	bl	800284a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b08      	cmp	r3, #8
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b08      	cmp	r3, #8
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0208 	mvn.w	r2, #8
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f960 	bl	8002838 <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f953 	bl	8002826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f962 	bl	800284a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0210 	mvn.w	r2, #16
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2208      	movs	r2, #8
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f936 	bl	8002838 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f929 	bl	8002826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f938 	bl	800284a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0201 	mvn.w	r2, #1
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fcfe 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b80      	cmp	r3, #128	; 0x80
 8002618:	d10e      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d107      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa6b 	bl	8002b0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d10e      	bne.n	8002664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d107      	bne.n	8002664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8fc 	bl	800285c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b20      	cmp	r3, #32
 8002670:	d10e      	bne.n	8002690 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b20      	cmp	r3, #32
 800267e:	d107      	bne.n	8002690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0220 	mvn.w	r2, #32
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fa36 	bl	8002afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_ConfigClockSource+0x1c>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e0b4      	b.n	800281e <HAL_TIM_ConfigClockSource+0x186>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ec:	d03e      	beq.n	800276c <HAL_TIM_ConfigClockSource+0xd4>
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f2:	f200 8087 	bhi.w	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	f000 8086 	beq.w	800280a <HAL_TIM_ConfigClockSource+0x172>
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	d87f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b70      	cmp	r3, #112	; 0x70
 8002706:	d01a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0xa6>
 8002708:	2b70      	cmp	r3, #112	; 0x70
 800270a:	d87b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b60      	cmp	r3, #96	; 0x60
 800270e:	d050      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002710:	2b60      	cmp	r3, #96	; 0x60
 8002712:	d877      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b50      	cmp	r3, #80	; 0x50
 8002716:	d03c      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0xfa>
 8002718:	2b50      	cmp	r3, #80	; 0x50
 800271a:	d873      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d058      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002720:	2b40      	cmp	r3, #64	; 0x40
 8002722:	d86f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b30      	cmp	r3, #48	; 0x30
 8002726:	d064      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002728:	2b30      	cmp	r3, #48	; 0x30
 800272a:	d86b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d060      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002730:	2b20      	cmp	r3, #32
 8002732:	d867      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05c      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	2b10      	cmp	r3, #16
 800273a:	d05a      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	e062      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f000 f95e 	bl	8002a0e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	609a      	str	r2, [r3, #8]
      break;
 800276a:	e04f      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f000 f947 	bl	8002a0e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800278e:	609a      	str	r2, [r3, #8]
      break;
 8002790:	e03c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 f8be 	bl	8002920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2150      	movs	r1, #80	; 0x50
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f915 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 80027b0:	e02c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 f8dc 	bl	800297c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2160      	movs	r1, #96	; 0x60
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f905 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 80027d0:	e01c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 f89e 	bl	8002920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2140      	movs	r1, #64	; 0x40
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f8f5 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 80027f0:	e00c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f000 f8ec 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 8002802:	e003      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e000      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800280a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
	...

08002870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a25      	ldr	r2, [pc, #148]	; (8002918 <TIM_Base_SetConfig+0xa8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <TIM_Base_SetConfig+0x28>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d003      	beq.n	8002898 <TIM_Base_SetConfig+0x28>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a22      	ldr	r2, [pc, #136]	; (800291c <TIM_Base_SetConfig+0xac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d108      	bne.n	80028aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1a      	ldr	r2, [pc, #104]	; (8002918 <TIM_Base_SetConfig+0xa8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <TIM_Base_SetConfig+0x52>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b8:	d003      	beq.n	80028c2 <TIM_Base_SetConfig+0x52>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a17      	ldr	r2, [pc, #92]	; (800291c <TIM_Base_SetConfig+0xac>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d108      	bne.n	80028d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <TIM_Base_SetConfig+0xa8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d103      	bne.n	8002908 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	615a      	str	r2, [r3, #20]
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40000400 	.word	0x40000400

08002920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f023 0201 	bic.w	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800294a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f023 030a 	bic.w	r3, r3, #10
 800295c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	621a      	str	r2, [r3, #32]
}
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f023 0210 	bic.w	r2, r3, #16
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	031b      	lsls	r3, r3, #12
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	621a      	str	r2, [r3, #32]
}
 80029d0:	bf00      	nop
 80029d2:	371c      	adds	r7, #28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f043 0307 	orr.w	r3, r3, #7
 80029fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b087      	sub	sp, #28
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	021a      	lsls	r2, r3, #8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	609a      	str	r2, [r3, #8]
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e041      	b.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d004      	beq.n	8002abc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10c      	bne.n	8002ad6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40000400 	.word	0x40000400

08002afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <__libc_init_array>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	2600      	movs	r6, #0
 8002b24:	4d0c      	ldr	r5, [pc, #48]	; (8002b58 <__libc_init_array+0x38>)
 8002b26:	4c0d      	ldr	r4, [pc, #52]	; (8002b5c <__libc_init_array+0x3c>)
 8002b28:	1b64      	subs	r4, r4, r5
 8002b2a:	10a4      	asrs	r4, r4, #2
 8002b2c:	42a6      	cmp	r6, r4
 8002b2e:	d109      	bne.n	8002b44 <__libc_init_array+0x24>
 8002b30:	f000 f822 	bl	8002b78 <_init>
 8002b34:	2600      	movs	r6, #0
 8002b36:	4d0a      	ldr	r5, [pc, #40]	; (8002b60 <__libc_init_array+0x40>)
 8002b38:	4c0a      	ldr	r4, [pc, #40]	; (8002b64 <__libc_init_array+0x44>)
 8002b3a:	1b64      	subs	r4, r4, r5
 8002b3c:	10a4      	asrs	r4, r4, #2
 8002b3e:	42a6      	cmp	r6, r4
 8002b40:	d105      	bne.n	8002b4e <__libc_init_array+0x2e>
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
 8002b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b48:	4798      	blx	r3
 8002b4a:	3601      	adds	r6, #1
 8002b4c:	e7ee      	b.n	8002b2c <__libc_init_array+0xc>
 8002b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b52:	4798      	blx	r3
 8002b54:	3601      	adds	r6, #1
 8002b56:	e7f2      	b.n	8002b3e <__libc_init_array+0x1e>
 8002b58:	08002bb4 	.word	0x08002bb4
 8002b5c:	08002bb4 	.word	0x08002bb4
 8002b60:	08002bb4 	.word	0x08002bb4
 8002b64:	08002bb8 	.word	0x08002bb8

08002b68 <memset>:
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4402      	add	r2, r0
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d100      	bne.n	8002b72 <memset+0xa>
 8002b70:	4770      	bx	lr
 8002b72:	f803 1b01 	strb.w	r1, [r3], #1
 8002b76:	e7f9      	b.n	8002b6c <memset+0x4>

08002b78 <_init>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	bf00      	nop
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr

08002b84 <_fini>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	bf00      	nop
 8002b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8a:	bc08      	pop	{r3}
 8002b8c:	469e      	mov	lr, r3
 8002b8e:	4770      	bx	lr
